"""sync with current schema

Revision ID: 1d1d6433e806
Revises: 28b250221d55
Create Date: 2025-08-19 23:05:37.087201

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = "1d1d6433e806"
down_revision: Union[str, None] = "28b250221d55"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Only add the column if it does not exist
    conn = op.get_bind()
    result = conn.execute(
        sa.text("""
            SELECT column_name FROM information_schema.columns
            WHERE table_name='symbol' AND column_name='description'
        """)
    )
    if not result.fetchone():
        op.add_column(
            "symbol",
            sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        )
        # Set a default value for existing NULLs
        op.execute("UPDATE symbol SET description = '' WHERE description IS NULL")
        # Alter the column to be NOT NULL
        op.alter_column(
            "symbol", "description", existing_type=sa.String(), nullable=False
        )
    op.drop_column("symbol", "index", if_exists=True)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "symbol", sa.Column("index", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.drop_column("symbol", "description")
    # ### end Alembic commands ###

    op.alter_column("symbol", "description", existing_type=sa.String(), nullable=True)

import { notifification } from "../utils/api";
import { type AutotradeSettings } from "./autotradeApiSlice";
import { userApiSlice } from "./userApiSlice";

export const testAutotradeApiSlice = userApiSlice.injectEndpoints({
  endpoints: (build) => ({
    getTestSettings: build.query<AutotradeSettings, void>({
      query: () => ({
        url: `${import.meta.env.VITE_TEST_AUTOTRADE}`,
        providesTags: ["test-autotrade-settings"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        }

        return data;
      },
    }),
    editTestSettings: build.mutation<void, AutotradeSettings>({
      query: (body) => ({
        url: `${import.meta.env.VITE_TEST_AUTOTRADE}`,
        method: "PUT",
        body,
        invalidatesTags: ["test-autotrade-settings"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        } else {
          notifification("success", message);
        }
        return data;
      },
    }),
  }),
});

// Hooks generated by Redux
export const { useGetTestSettingsQuery, useEditTestSettingsMutation } =
  testAutotradeApiSlice;

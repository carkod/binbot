import { createApi } from "@reduxjs/toolkit/query/react"
import {
  baseQuery,
  type NotificationType,
  notifification,
} from "../../utils/api"
import { weekAgo } from "../../utils/time"
import type { Bot } from "./botInitialState"
import { computeTotalProfit } from "./profits"
import { userApiSlice } from "../userApiSlice"

interface DefaultBotsResponse {
  error: number
  data?: string
  message?: string
}

interface GetBotsResponse {
  bots: Bot[]
  totalProfit: number
}

interface GetBotsParams {
  status?: string
  startDate?: number
  endDate?: number
}

export const buildGetBotsPath = (
  status: string = null,
  startDate: number = weekAgo(),
  endDate: number = new Date().getTime(),
): string => {
  const params = new URLSearchParams({
    start_date: startDate.toString(),
    end_date: endDate.toString(),
    status: status,
  })
  return params.toString()
}

export const botsApiSlice = userApiSlice.injectEndpoints({
  endpoints: build => ({
    getBots: build.query<GetBotsResponse, GetBotsParams>({
      query: ({ status, startDate, endDate }) => ({
        url:
          `${import.meta.env.VITE_GET_BOTS}` ||
          "/bots",
        params: { status, startDate, endDate },
        method: "GET",
        providesTags: ["bots"],
        transformResponse: ({ data }, meta, arg) => {
          const bots = data
          return bots
        },
        transformErrorResponse: (response: { data }, meta, arg) => {
          console.log(response)
          return response
        }
      }),
    }),
    getSingleBot: build.query<DefaultBotsResponse, string>({
      query: id => ({
        url: `${import.meta.env.VITE_GET_BOTS}/${id}` || "/bot",
        method: "GET",
        transformResponse: (response: { data }, meta, arg) => response.data,
      }),
    }),
    createBot: build.mutation<DefaultBotsResponse, Bot>({
      query: body => ({
        url: import.meta.env.VITE_GET_BOTS || "/bot",
        method: "POST",
        body: body,
        invalidatesTags: ["bots"],
        transformResponse: (response: { data }, meta, arg) => response.data,
      }),
    }),
    editBot: build.mutation<DefaultBotsResponse, Bot>({
      query: body => ({
        url: import.meta.env.VITE_GET_BOTS || "/bot",
        method: "PUT",
        body: body,
        invalidatesTags: ["bots"],
        transformResponse: (response: { data }, meta, arg) => response.data,
      }),
    }),
    deleteBot: build.mutation<DefaultBotsResponse, string[]>({
      query: id => ({
        url: `${import.meta.env.VITE_GET_BOTS}/${id}` || "/bot",
        method: "DELETE",
        invalidatesTags: ["bots"],
      }),
    }),
    activateBot: build.query<DefaultBotsResponse, string>({
      query: (id: string) => ({
        url: `${import.meta.env.VITE_ACTIVATE_BOT}/${id}` || "/bot/activate",
        method: "GET",
      }),
    }),
    deactivateBot: build.query<DefaultBotsResponse, string>({
      query: (id: string) => ({
        url:
          `${import.meta.env.VITE_DEACTIVATE_BOT}/${id}` || "/bot/deactivate",
        method: "GET",
      }),
    }),
  }),
  overrideExisting: false, // Throws error if dup endpoints are found
})

// Hooks generated by Redux
export const {
  useGetBotsQuery,
  useGetSingleBotQuery,
  useCreateBotMutation,
  useEditBotMutation,
  useDeleteBotMutation,
  useActivateBotQuery,
  useDeactivateBotQuery,
} = botsApiSlice

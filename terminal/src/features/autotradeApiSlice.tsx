import { notifification } from "../utils/api"
import { type BotStrategy } from "../utils/enums"
import { userApiSlice } from "./userApiSlice"

export interface AutotradeSettings {
  _id: "settings"
  candlestick_interval: string
  autotrade: 0 | 1
  trailling: boolean
  trailling_deviation: number
  trailling_profit: number
  stop_loss: number
  take_profit: number
  balance_to_use: string
  balance_size_to_use: string
  max_request: number
  system_logs: []
  update_required: number
  telegram_signals: 0 | 1
  max_active_autotrade_bots: number
  base_order_size: number
  test_autotrade: 0 | 1
  updated_at: number
  strategy: BotStrategy
  telegram_signals: 0 | 1
}

export interface DefaultBotsResponse {
  error: number
  data?: AutotradeSettings
  message?: string
}

export const autotradeApiSlice = userApiSlice.injectEndpoints({
  endpoints: build => ({
    getSettings: build.query<AutotradeSettings, void>({
      query: () => ({
        url: `${import.meta.env.VITE_RESEARCH_CONTROLLER}` || "/research",
        providesTags: ["autotrade-settings"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message)
        } else {
          notifification("success", message)
        }

        return data
      },
    }),
    editSettings: build.mutation<void, AutotradeSettings>({
      query: (body) => ({
        url: `${import.meta.env.VITE_RESEARCH_CONTROLLER}` || "/research",
        method: "PUT",
        body,
        invalidatesTags: ["autotrade-settings"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message)
        } else {
          notifification("success", message)
        }
        return data
      },
    }),
  }),
})

// Hooks generated by Redux
export const { useGetSettingsQuery, useEditSettingsMutation } = autotradeApiSlice

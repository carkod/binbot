import { notifification } from "../utils/api";
import { type BinanceKlineintervals } from "../utils/enums";
import { userApiSlice } from "./userApiSlice";

export interface AutotradeSettings {
  _id: "settings";
  candlestick_interval: BinanceKlineintervals;
  autotrade: boolean;
  trailling: boolean;
  trailling_deviation: number;
  trailling_profit: number;
  stop_loss: number;
  take_profit: number;
  balance_to_use: string;
  balance_size_to_use: number;
  max_request: number;
  system_logs: [];
  update_required: number;
  telegram_signals: boolean;
  max_active_autotrade_bots: number;
  base_order_size: number;
  test_autotrade: boolean;
  updated_at: number;
}

export const autotradeApiSlice = userApiSlice.injectEndpoints({
  endpoints: (build) => ({
    getSettings: build.query<AutotradeSettings, void>({
      query: () => ({
        url: `${import.meta.env.VITE_RESEARCH_CONTROLLER}` || "/research",
        providesTags: ["autotrade-settings"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        } else {
          notifification("success", message);
        }

        return data;
      },
    }),
    editSettings: build.mutation<void, AutotradeSettings>({
      query: (body) => ({
        url: `${import.meta.env.VITE_RESEARCH_CONTROLLER}` || "/research",
        method: "PUT",
        body,
        invalidatesTags: ["autotrade-settings"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        } else {
          notifification("success", message);
        }
        return data;
      },
    }),
  }),
});

// Hooks generated by Redux
export const { useGetSettingsQuery, useEditSettingsMutation } =
  autotradeApiSlice;

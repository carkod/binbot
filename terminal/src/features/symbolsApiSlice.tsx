import { notifification } from "../utils/api";
import { type StandardResponse } from "../utils/api.types";
import { userApiSlice } from "./userApiSlice";

export interface SymbolPayload {
  id: string;
  // If symbols blacklisted active = false
  active: boolean;
  blacklist_reason: string;
  cooldown?: number;
  cooldown_start_ts?: number;
  asset_indices?: number[];
  base_asset: string;
  description?: string;
  is_margin_trading_allowed?: boolean;
  min_notional?: number;
  price_precision?: number;
  qty_precision?: number;
  quote_asset: string;
}

// From symbol_table.py
export interface ISymbol {
  id: string;
  reason: string;
  created_at: number;
  updated_at: number;
  active: boolean;
  blacklist_reason: string;
  quote_asset: string;
  base_asset: string;
  price_precision: number;
  qty_precision: number;
  min_qty: number;
  min_notional: number;
  cooldown: number;
  cooldown_start_ts: number;
}

export interface SymbolResponse extends StandardResponse {
  data: ISymbol[];
}

export const symbolsApiSlice = userApiSlice.injectEndpoints({
  endpoints: (build) => ({
    getSymbols: build.query<ISymbol[], void>({
      query: () => ({
        url: `${import.meta.env.VITE_SYMBOLS}`,
        providesTags: ["symbols"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        }

        return data;
      },
    }),
    getOneSymbol: build.query<ISymbol , string>({
      query: (pair) => ({
        url: `${import.meta.env.VITE_SYMBOL}/${pair}`,
        providesTags: [{
          type: "symbol",
          id: pair,
        }],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        }

        return data;
      },
    }),
    deleteSymbol: build.mutation<void, string>({
      query: (id) => ({
        url: `${import.meta.env.VITE_SYMBOL}/${id}`,
        method: "DELETE",
        invalidatesTags: ["symbols"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        } else {
          notifification("success", message);
        }
        return data;
      },
    }),
    updateSymbol: build.mutation<void, SymbolPayload>({
      query: (body) => ({
        url: `${import.meta.env.VITE_SYMBOL}`,
        method: "PUT",
        body: body,
        invalidatesTags: ["symbols"],
      }),
      transformResponse: ({ data, message, error }, meta, arg) => {
        if (error && error === 1) {
          notifification("error", message);
        } else {
          notifification("success", message);
        }
        return data;
      },
    }),
  }),
});

// Hooks generated by Redux
export const {
  useGetSymbolsQuery,
  useGetOneSymbolQuery,
  useUpdateSymbolMutation,
  useDeleteSymbolMutation,
} = symbolsApiSlice;
